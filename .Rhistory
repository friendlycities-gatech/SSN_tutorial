library(SSNtools)
#MafiaNodes and MafiaEdges are built-in datasets in SSNtools package
data(MafiaNodes)
data(MafiaEdges)
#convert networkd data to an igraph object
g <- graph_from_data_frame(MafiaEdges, directed = FALSE, vertices=MafiaNodes)
#set the node size to base on clustering coefficients
V(g)$size <- transitivity(g, type='local')
#delete vertices that do not have clustering coefficients
g = delete_vertices(g, is.na(V(g)$size))
#Set the node color to vary by mafia family group.
# ---- get all color from a color device
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# ---- sample n color, in which n = family groups
colrs <- sample(color, length(unique(V(g)$Family)))
# ---- #assign color to correpsonding mafia family member
V(g)$color <- colrs[as.numeric(factor(V(g)$Family))]
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 10*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
#Add node color legend
fname = sort(unique(V(g)$Family)) #sort the legend labels
legend(x=-2.2, y=1.5, #legend position
legend=fname,
pch=21, #solid circle with one color
pt.bg=colrs[as.numeric(factor(fname))],
pt.cex=1, cex=.7, bty="n", ncol=1,
title = 'Node Color: Family Group'
)
#Add node size legend
# ---- quantile breaks to show node size
breaks = round(quantile(V(g)$size, c(0.2, 0.4, 0.6, 0.8, 1)),2)
legend(x = -2.2, y = -1.2, #legend position
legend=breaks, pch=21,
pt.bg=NA, #no color background
cex=0.7, #size of legend
pt.cex=breaks * 5, #Scaled node size
bty="n", #node shape
ncol=5, #number of column for legend
text.width = 0.27, #adjust width of each column
title = 'Node Size: Local Clustering Coefficient')
library(igraph)
library(SSNtools)
#MafiaNodes and MafiaEdges are built-in datasets in SSNtools package
data(MafiaNodes)
data(MafiaEdges)
#convert networkd data to an igraph object
g <- graph_from_data_frame(MafiaEdges, directed = FALSE, vertices=MafiaNodes)
#set the node size to base on clustering coefficients
V(g)$size <- transitivity(g, type='local')
#delete vertices that do not have clustering coefficients
g = delete_vertices(g, is.na(V(g)$size))
#Set the node color to vary by mafia family group.
# ---- get all color from a color device
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# ---- sample n color, in which n = family groups
colrs <- sample(color, length(unique(V(g)$Family)))
# ---- #assign color to correpsonding mafia family member
V(g)$color <- colrs[as.numeric(factor(V(g)$Family))]
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 10*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
#Add node color legend
fname = sort(unique(V(g)$Family)) #sort the legend labels
legend(x=-2.2, y=1.5, #legend position
legend=fname,
pch=21, #solid circle with one color
pt.bg=colrs[as.numeric(factor(fname))],
pt.cex=1, cex=.7, bty="n", ncol=1,
title = 'Node Color: Family Group'
)
#Add node size legend
# ---- quantile breaks to show node size
breaks = round(quantile(V(g)$size, c(0.2, 0.4, 0.6, 0.8, 1)),2)
legend(x = -2.2, y = -1.2, #legend position
legend=breaks, pch=21,
pt.bg=NA, #no color background
cex=0.7, #size of legend
pt.cex=breaks * 4, #Scaled node size
bty="n", #node shape
ncol=5, #number of column for legend
text.width = 0.27, #adjust width of each column
title = 'Node Size: Local Clustering Coefficient')
library(igraph)
library(SSNtools)
#MafiaNodes and MafiaEdges are built-in datasets in SSNtools package
data(MafiaNodes)
data(MafiaEdges)
#convert networkd data to an igraph object
g <- graph_from_data_frame(MafiaEdges, directed = FALSE, vertices=MafiaNodes)
#set the node size to base on clustering coefficients
V(g)$size <- transitivity(g, type='local')
#delete vertices that do not have clustering coefficients
g = delete_vertices(g, is.na(V(g)$size))
#Set the node color to vary by mafia family group.
# ---- get all color from a color device
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# ---- sample n color, in which n = family groups
colrs <- sample(color, length(unique(V(g)$Family)))
# ---- #assign color to correpsonding mafia family member
V(g)$color <- colrs[as.numeric(factor(V(g)$Family))]
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 10*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
#Add node color legend
fname = sort(unique(V(g)$Family)) #sort the legend labels
legend(x=-2.2, y=1.5, #legend position
legend=fname,
pch=21, #solid circle with one color
pt.bg=colrs[as.numeric(factor(fname))],
pt.cex=1, cex=.7, bty="n", ncol=1,
title = 'Node Color: Family Group'
)
#Add node size legend
# ---- quantile breaks to show node size
breaks = round(quantile(V(g)$size, c(0.2, 0.4, 0.6, 0.8, 1)),2)
legend(x = -2.2, y = -1.2, #legend position
legend=breaks, pch=21,
pt.bg=NA, #no color background
cex=0.7, #size of legend
pt.cex=breaks * 2, #Scaled node size
bty="n", #node shape
ncol=5, #number of column for legend
text.width = 0.27, #adjust width of each column
title = 'Node Size: Local Clustering Coefficient')
library(igraph)
library(SSNtools)
#MafiaNodes and MafiaEdges are built-in datasets in SSNtools package
data(MafiaNodes)
data(MafiaEdges)
#convert networkd data to an igraph object
g <- graph_from_data_frame(MafiaEdges, directed = FALSE, vertices=MafiaNodes)
#set the node size to base on clustering coefficients
V(g)$size <- transitivity(g, type='local')
#delete vertices that do not have clustering coefficients
g = delete_vertices(g, is.na(V(g)$size))
#Set the node color to vary by mafia family group.
# ---- get all color from a color device
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# ---- sample n color, in which n = family groups
colrs <- sample(color, length(unique(V(g)$Family)))
# ---- #assign color to correpsonding mafia family member
V(g)$color <- colrs[as.numeric(factor(V(g)$Family))]
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 10*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
#Add node color legend
fname = sort(unique(V(g)$Family)) #sort the legend labels
legend(x=-2.2, y=1.5, #legend position
legend=fname,
pch=21, #solid circle with one color
pt.bg=colrs[as.numeric(factor(fname))],
pt.cex=1, cex=.7, bty="n", ncol=1,
title = 'Node Color: Family Group'
)
#Add node size legend
# ---- quantile breaks to show node size
breaks = round(quantile(V(g)$size, c(0.2, 0.4, 0.6, 0.8, 1)),2)
legend(x = -2.2, y = -1.2, #legend position
legend=breaks, pch=21,
pt.bg=NA, #no color background
cex=0.7, #size of legend
pt.cex=breaks * 3, #Scaled node size
bty="n", #node shape
ncol=5, #number of column for legend
text.width = 0.27, #adjust width of each column
title = 'Node Size: Local Clustering Coefficient')
library(RColorBrewer)
brewer.pal(4, "YlGnBu")
library(tigris)
library(sf)
library(tidyverse)
library(basemaps)
#states is a function in tigris to download U.S. state boundary shapefile
us_states = states(cb=TRUE, progress_bar = FALSE) %>%
filter(!STUSPS %in% c('PR','AS', 'AK', 'GU','MP','VI', 'HI'))
#Decide which basemap service to use and what map styles.
set_defaults(map_service = "carto", map_type = "light")
bgbox = st_bbox(us_states, crs=4326) %>% st_as_sfc()
bg = basemap_stars(bgbox) #process basemap into a raster
tmap_mode('plot')
library(tigris)
library(sf)
library(tidyverse)
library(basemaps)
library(tmap)
#states is a function in tigris to download U.S. state boundary shapefile
us_states = states(cb=TRUE, progress_bar = FALSE) %>%
filter(!STUSPS %in% c('PR','AS', 'AK', 'GU','MP','VI', 'HI'))
#Decide which basemap service to use and what map styles.
set_defaults(map_service = "carto", map_type = "light")
bgbox = st_bbox(us_states, crs=4326) %>% st_as_sfc()
bg = basemap_stars(bgbox) #process basemap into a raster
tmap_mode('plot')
map = tm_shape(bg) + #add base map
tm_rgb() +
tm_shape(us_states) +
tm_polygons(alpha=0) +
tm_shape(MafiaSpatial) +
tm_symbols(size="degree", scale=5,
col='lightblue', border.col='#6698CC',
title.size=c('Degree of Connections')) +
tm_layout(legend.position = c('left', 'bottom'))
library(tigris)
library(sf)
library(tidyverse)
library(basemaps)
library(tmap)
#states is a function in tigris to download U.S. state boundary shapefile
us_states = states(cb=TRUE, progress_bar = FALSE) %>%
filter(!STUSPS %in% c('PR','AS', 'AK', 'GU','MP','VI', 'HI'))
MafiaSpatial = MafiaNodes %>%
st_as_sf(coords=c("LonX", "LatY"), crs = 4326)
g = graph_from_data_frame(MafiaEdges, directed = FALSE, vertices=MafiaSpatial)
MafiaSpatial$degree = degree(g)
#Decide which basemap service to use and what map styles.
set_defaults(map_service = "carto", map_type = "light")
bgbox = st_bbox(us_states, crs=4326) %>% st_as_sfc()
bg = basemap_stars(bgbox) #process basemap into a raster
tmap_mode('plot')
map = tm_shape(bg) + #add base map
tm_rgb() +
tm_shape(us_states) +
tm_polygons(alpha=0) +
tm_shape(MafiaSpatial) +
tm_symbols(size="degree", scale=5,
col='lightblue', border.col='#6698CC',
title.size=c('Degree of Connections')) +
tm_layout(legend.position = c('left', 'bottom'))
map
colnames(MafiaNodes)
RColorBrewer::brewer.pal(4, "YlGnBu")
library(sf)
library(tidyverse)
library(tmap)
library(igraph)
library(tigris)
#install.packages("devtools") #to download R package on GitHub
#devtools::install_github("friendlycities-gatech/SSNtools")
library(SSNtools)
# ------- 3.1 Convert Coordinates to Points ------- #
#MafiaNodes is a built-in dataset in SSNtools R package
data(MafiaNodes)
MafiaSpatial = MafiaNodes %>%
st_as_sf(coords=c("LonX", "LatY"), crs = 4326)
head(MafiaSpatial, 3)
# ------- 3.2 Visualize Nodes ------- #
#Convert coordinate system
MafiaSpatial = MafiaSpatial %>%
st_transform(MafiaSpatioal, crs="ESRI:102010")
#states is a function in tigris to download U.S. state boundary shapefile
us_states = states(cb=TRUE, progress_bar = FALSE) %>%
filter(!STUSPS %in% c('PR','AS', 'AK', 'GU','MP','VI', 'HI')) %>%
st_transform(crs="ESRI:102010")
tmap_mode('plot') # set tmap plotting mode to static map
tm_shape(us_states) +
tm_polygons() + #draw U.S. state shapefile first as polygons
tm_shape(MafiaSpatial) +
tm_symbols() #overlay nodes as points
tm_shape(Africa) +
tm_polygons(rep("life_exp", 5), style = c("cat", "cat", "pretty", "cont", "log10"),
palette = list("Set2", "YlOrBr", "YlOrBr", "YlOrBr", "YlOrBr"),
title = "") +
tm_layout(panel.labels = c("categorical scale", "ordinal scale", "intervals scale", "continuous scale", "log10 scale"),
inner.margins = c(0.05, 0.2, 0.1, 0.05),
legend.text.size = 0.5)
library(tmap)
tm_shape(Africa) +
tm_polygons(rep("life_exp", 5), style = c("cat", "cat", "pretty", "cont", "log10"),
palette = list("Set2", "YlOrBr", "YlOrBr", "YlOrBr", "YlOrBr"),
title = "") +
tm_layout(panel.labels = c("categorical scale", "ordinal scale", "intervals scale", "continuous scale", "log10 scale"),
inner.margins = c(0.05, 0.2, 0.1, 0.05),
legend.text.size = 0.5)
data(Africa)
tm_shape(Africa) +
tm_polygons(rep("life_exp", 5), style = c("cat", "cat", "pretty", "cont", "log10"),
palette = list("Set2", "YlOrBr", "YlOrBr", "YlOrBr", "YlOrBr"),
title = "") +
tm_layout(panel.labels = c("categorical scale", "ordinal scale", "intervals scale", "continuous scale", "log10 scale"),
inner.margins = c(0.05, 0.2, 0.1, 0.05),
legend.text.size = 0.5)
library(tmap)
tm_shape(World) +
tm_polygons(rep("life_exp", 5), style = c("cat", "cat", "pretty", "cont", "log10"),
palette = list("Set2", "YlOrBr", "YlOrBr", "YlOrBr", "YlOrBr"),
title = "") +
tm_layout(panel.labels = c("categorical scale", "ordinal scale", "intervals scale", "continuous scale", "log10 scale"),
inner.margins = c(0.05, 0.2, 0.1, 0.05),
legend.text.size = 0.5)
data(World)
tm_shape(World) +
tm_polygons(rep("life_exp", 5), style = c("cat", "cat", "pretty", "cont", "log10"),
palette = list("Set2", "YlOrBr", "YlOrBr", "YlOrBr", "YlOrBr"),
title = "") +
tm_layout(panel.labels = c("categorical scale", "ordinal scale", "intervals scale", "continuous scale", "log10 scale"),
inner.margins = c(0.05, 0.2, 0.1, 0.05),
legend.text.size = 0.5)
tm_basemap(server = "OpenTopoMap", alpha = 0.5) +
tm_shape(World) +
tm_polygons(alpha=0)
tm_basemap(server = "OpenTopoMap", zoom = 2, alpha = 0.5) +
tm_shape(World, bbox = sf::st_bbox(c(xmin = -180, xmax = 180, ymin = -86, ymax = 86))) +
tm_polygons(fill = NA, col = "black") +
tm_shape(metro) +
tm_symbols(size = 0.1, col = "red") +
tm_layout(inner.margins = rep(0, 4))
tm_basemap(server = "OpenTopoMap", alpha = 0.5) +
tm_shape(World, bbox = sf::st_bbox(c(xmin = -180, xmax = 180, ymin = -86, ymax = 86))) +
tm_polygons(fill = NA, col = "black") +
tm_shape(metro) +
tm_symbols(size = 0.1, col = "red") +
tm_layout(inner.margins = rep(0, 4))
tm_basemap(server = "OpenTopoMap", alpha = 0.5) +
tm_shape(World, bbox = sf::st_bbox(c(xmin = -180, xmax = 180, ymin = -86, ymax = 86))) +
tm_polygons(fill = NA, col = "black")
library(SSNtools)
data(NYCMafiaNodes)
data(NYCMafiaEdges)
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
library(tmap)
library(basemaps)
library(sf)
library(tidyverse)
library(stplanr)
library(SSNtools)
# we will use NDScanRadius as an example
result = NDScanRadius(nodes, edges, 500, min=3)
heat = result[[1]]
edgeWithin = result[[2]]
# convert heat dataframe to a spatial sf object
MafiaSpatial = heat %>%
left_join(NYCMafiaNodes, by=c('label'), copy=FALSE) %>% st_as_sf(coords=c('LonX', 'LatY'), crs=32118)
# convert edgeWithin dataframe to line geometry and filter those that are within the window radius.
NYCMafiaEdges_shp = od2line(edgeWithin, MafiaSpatial) %>%
filter(WithinWindow == 1)
# create basemap with functions from basemaps library
set_defaults(map_service = "carto", map_type = "light")
bgbox = st_bbox(MafiaSpatial) %>% st_as_sfc()
bg = basemap_stars(bgbox)
# create hotspot map with functions from tmap library
tmap_mode('plot')
g =
tm_shape(bg) +
tm_rgb(alpha=0.8) +
#map edges within searching window
tm_shape(NYCMafiaEdges_shp) +
tm_lines(col='black', lwd=1) +
#map nodes with NA values
tm_shape(MafiaSpatial %>% filter(is.na(heat))) +
tm_symbols(col='white', size=0.05) +
#map nodes with heat values, allowing nodes with higher heat values to be mapped on top
tm_shape(MafiaSpatial %>% drop_na(heat) %>% arrange(heat)) +
tm_symbols(col='heat', size=0.1, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=c(0, 0.00001, 0.10, 0.25, 0.667)) +
#customize legend and layout
tm_add_legend(type='symbol', labels=c('0', '(0, 0.10]', '(0.10, 0.25]', '(0.25, 0.667]', 'NA (Less than MinPts)'), col=c('#FBD977', '#F78D3D', '#E3211B', '#800F26', 'white'), is.portrait = T, title=c('Network Density'), size=0.5) +
tm_add_legend(type='line', labels=c(paste0('Edges within window size')), col='black', lwd=1) +
tm_scale_bar(breaks=c(0, 5, 10), text.size = 1) +
tm_layout(legend.title.size = 1.3, legend.text.size = 1, legend.width = 1) +
tm_layout(main.title = 'NYC 1960s Mafia SSN Hotspots',
main.title.position = c('center'),
main.title.size=1.5)
g
# Plot Inset Map
# create a bounding box in crs=32118 to retrieve basemap
Inset = st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326) %>% st_transform(crs=32118))
# create a basemap for the inset map
Inset_bg = basemap_stars(Inset)
# create the inset map
InsetMap = tm_shape(Inset_bg) +
tm_rgb() +
tm_shape(NYCMafiaEdges_shp ) +
tm_lines(col='black', lwd=1) +
tm_shape(MafiaSpatial %>% filter(is.na(heat))) +
tm_symbols(col='white', size=0.05) +
tm_shape(MafiaSpatial %>% drop_na(heat) %>% arrange(heat)) +
tm_symbols(col='heat', size=0.2, style='fixed',
breaks=c(0, 0.00001, 0.10, 0.25, 0.667), legend.col.show = FALSE,
palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26')) +
tm_layout(frame=c('black'), frame.lwd = 2, main.title = c('Little Italy'),
main.title.position = c('center'),
main.title.size = 0.8, fontface = 2)
# create the bounding box map
box = tm_shape(st_bbox(Inset) %>% st_as_sfc()) + tm_polygons(alpha=0, border.col='black', lwd=1)
# create aspect ratio to preserve the height and width ratio in the inset map
aspect_ratio = unname((Inset$ymax - Inset$ymin)/(Inset$xmax - Inset$xmin))
print(g+box+InsetMap, vp=viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5))
library(grid)
print(g+box+InsetMap, vp=viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5))
print(InsetMap, vp=viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5))
g
print(InsetMap, vp=viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5))
g + box
print(InsetMap, vp=viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5))
# create a bounding box in crs=32118 to retrieve basemap
Inset = st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326) %>% st_transform(crs=32118))
# create a basemap for the inset map
Inset_bg = basemap_stars(Inset)
# create the inset map
InsetMap = tm_shape(Inset_bg) +
tm_rgb() +
tm_shape(NYCMafiaEdges_shp ) +
tm_lines(col='black', lwd=1) +
tm_shape(MafiaSpatial %>% filter(is.na(heat))) +
tm_symbols(col='white', size=0.05) +
tm_shape(MafiaSpatial %>% drop_na(heat) %>% arrange(heat)) +
tm_symbols(col='heat', size=0.2, style='fixed',
breaks=c(0, 0.00001, 0.10, 0.25, 0.667), legend.col.show = FALSE,
palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26')) +
tm_layout(frame=c('black'), frame.lwd = 2, main.title = c('Little Italy'),
main.title.position = c('center'),
main.title.size = 0.8, fontface = 2)
# create the bounding box map
box = tm_shape(st_bbox(Inset) %>% st_as_sfc()) + tm_polygons(alpha=0, border.col='black', lwd=1)
# create aspect ratio to preserve the height and width ratio in the inset map
aspect_ratio = unname((Inset$ymax - Inset$ymin)/(Inset$xmax - Inset$xmin))
# print inset map on top
library(grid)
g + box
print(InsetMap, vp=viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5))
# export the background map g with the inset map.
# library(grid)
# tmap_save(g + box, insets_tm=InsetMap,
#           insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
#           filename='PATH', dpi=600)
# create a bounding box in crs=32118 to retrieve basemap
Inset = st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326) %>% st_transform(crs=32118))
# create a basemap for the inset map
Inset_bg = basemap_stars(Inset)
# create the inset map
InsetMap = tm_shape(Inset_bg) +
tm_rgb() +
tm_shape(NYCMafiaEdges_shp ) +
tm_lines(col='black', lwd=1) +
tm_shape(MafiaSpatial %>% filter(is.na(heat))) +
tm_symbols(col='white', size=0.05) +
tm_shape(MafiaSpatial %>% drop_na(heat) %>% arrange(heat)) +
tm_symbols(col='heat', size=0.2, style='fixed',
breaks=c(0, 0.00001, 0.10, 0.25, 0.667), legend.col.show = FALSE,
palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26')) +
tm_layout(frame=c('black'), frame.lwd = 2, main.title = c('Little Italy'),
main.title.position = c('center'),
main.title.size = 0.8, fontface = 2)
# create the bounding box map
box = tm_shape(st_bbox(Inset) %>% st_as_sfc()) + tm_polygons(alpha=0, border.col='black', lwd=1)
# create aspect ratio to preserve the height and width ratio in the inset map
aspect_ratio = unname((Inset$ymax - Inset$ymin)/(Inset$xmax - Inset$xmin))
# print inset map on top
library(grid)
g + box
print(InsetMap, vp=viewport(0.21, 0.54, width = 0.15, height = aspect_ratio*0.5))
# export the background map g with the inset map.
# library(grid)
# tmap_save(g + box, insets_tm=InsetMap,
#           insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
#           filename='PATH', dpi=600)
# create a bounding box in crs=32118 to retrieve basemap
Inset = st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326) %>% st_transform(crs=32118))
# create a basemap for the inset map
Inset_bg = basemap_stars(Inset)
# create the inset map
InsetMap = tm_shape(Inset_bg) +
tm_rgb() +
tm_shape(NYCMafiaEdges_shp ) +
tm_lines(col='black', lwd=1) +
tm_shape(MafiaSpatial %>% filter(is.na(heat))) +
tm_symbols(col='white', size=0.05) +
tm_shape(MafiaSpatial %>% drop_na(heat) %>% arrange(heat)) +
tm_symbols(col='heat', size=0.2, style='fixed',
breaks=c(0, 0.00001, 0.10, 0.25, 0.667), legend.col.show = FALSE,
palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26')) +
tm_layout(frame=c('black'), frame.lwd = 2, main.title = c('Little Italy'),
main.title.position = c('center'),
main.title.size = 0.8, fontface = 2)
# create the bounding box map
box = tm_shape(st_bbox(Inset) %>% st_as_sfc()) + tm_polygons(alpha=0, border.col='black', lwd=1)
# create aspect ratio to preserve the height and width ratio in the inset map
aspect_ratio = unname((Inset$ymax - Inset$ymin)/(Inset$xmax - Inset$xmin))
# print inset map on top
library(grid)
g + box
print(InsetMap, vp=viewport(0.21, 0.54, width = 0.15, height = aspect_ratio*0.5))
# export the background map g with the inset map.
# library(grid)
# tmap_save(g + box, insets_tm=InsetMap,
#           insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
#           filename='PATH', dpi=600)
